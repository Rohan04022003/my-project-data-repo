[
  {
    "id": "html-css-js-foundation",
    "title": "How I Built a Strong Frontend Foundation with HTML, CSS & JavaScript",
    "description": "My journey of learning HTML, CSS, and JavaScript through hands-on projects. Here's how I built real-world UIs from scratch as a fresher.",
    "coverImage": "https://i.pinimg.com/736x/48/a0/42/48a0420050feb99091cd6e40deec2854.jpg",
    "date": "2023-06-02",
    "tags": ["html", "css", "javascript", "frontend", "foundation"],
    "readTime": "5 min read",
    "slug": "html-css-js-foundation",
    "projectSlug": "",
    "author": {
      "name": "Rohan Kumar Mahto",
      "avatar": "/images/author/rohan.png"
    },
    "content": {
      "sections": [
        {
          "heading": "Starting Out",
          "text": "Coming from a Bachelor of Computer Applications (BCA) background, I had already studied programming fundamentals and computer systems. But what truly helped me grow was stepping out of academic theory and diving into hands-on frontend development. I dedicated myself to mastering HTML, CSS, and JavaScript — not just through courses, but by building interfaces that looked and behaved like real products. I challenged myself to build without frameworks, understanding each line of code deeply. This phase laid the groundwork for everything I’ve built since."
        },
        {
          "heading": "What I Built",
          "list": [
            "Responsive Landing Pages – Crafted with semantic HTML and CSS Grid/Flexbox. These helped me understand layout, alignment, and how content adapts across screen sizes.",
            "Vanilla JavaScript Calculator – I handled user input, operator chaining, error validation, and screen updates — all without any library support.",
            "Form Validator – Using JavaScript, I built a form that validated inputs in real-time, displayed inline error messages, and controlled the submit button state.",
            "News UI Layout – I recreated a modern news website layout with cards, headlines, categories, and responsive behavior — practicing real-world design systems."
          ]
        },
        {
          "heading": "Takeaway",
          "text": "This journey taught me more than just syntax — it trained my mind to think like a frontend engineer. I learned how the DOM actually works, how CSS affects rendering, and how users interact with UI. Because I worked without shortcuts or frameworks in the beginning, I now write scalable React components and debug layout issues with ease. Looking back, these months of pure HTML, CSS, and JavaScript practice were the most valuable part of my learning path."
        }
      ]
    }
  },
  {
    "id": "ai-chatbot",
    "title": "Building BotForge AI – A Multi-Model Chatbot in React",
    "description": "A complete breakdown of how I built BotForge AI – a sleek AI chatbot interface using React, Context API, and Tailwind CSS. Supports Cohere, Gemini & Mistral.",
    "coverImage": "https://raw.githubusercontent.com/Rohan04022003/my-project-data-repo/main/public/images/botforge01.png",
    "date": "2025-07-01",
    "tags": ["react", "typescript", "chatbot", "ai", "frontend"],
    "readTime": "6 min read",
    "slug": "ai-chatbot",
    "projectSlug": "ai-chatbot",
    "author": {
      "name": "Rohan Kumar Mahto",
      "avatar": "/images/author/rohan.png"
    },
    "content": {
      "sections": [
        {
          "heading": "Why I Built This",
          "text": "After building a few basic React projects, I wanted to challenge myself with something real — something that uses modern APIs and addresses a growing trend. That’s where the idea of BotForge AI was born: a sleek, multi-model chatbot where users can talk to Cohere, Gemini, or Mistral through one interface. My goal wasn’t just to build “another chat app”, but to make something that looked professional, could scale, and felt like a polished SaaS prototype. I focused on clarity in code, modularity in architecture, and fluidity in UX."
        },
        {
          "heading": "Features",
          "list": [
            "Switch between Cohere, Gemini, and Mistral in real-time, with a dropdown to choose models.",
            "Create, edit, and manage custom bots with personalized instructions and model preferences.",
            "Chats are stored and can be exported to PDF using `jsPDF`, allowing users to keep a record.",
            "Fully responsive layout with sidebar navigation, onboarding modal, and smooth transitions.",
            "Supports theme toggling and clean UI with Tailwind CSS and Lucide icons."
          ]
        },
        {
          "heading": "Stack",
          "list": [
            "React (functional components + hooks) with TypeScript for type safety and modularity.",
            "Vite for blazing fast dev setup and smooth build pipeline.",
            "Tailwind CSS for rapid styling with utility classes and dark mode built-in.",
            "Context API to manage user, bot, and theme data globally without prop drilling.",
            "jsPDF to export conversations directly to PDF with formatting."
          ]
        },
        {
          "heading": "Links",
          "list": [
            "https://bot-forge-ai.vercel.app/",
            "https://github.com/Rohan04022003/botForge-AI"
          ]
        }
      ]
    }
  }
]
